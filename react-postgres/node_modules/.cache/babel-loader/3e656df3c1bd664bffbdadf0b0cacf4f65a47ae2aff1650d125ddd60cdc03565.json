{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0440\\u0430\\u0431\\u043E\\u0442\\u0430\\\\Projects\\\\Spa_table1\\\\react-postgres\\\\src\\\\components\\\\Table.js\",\n  _s = $RefreshSig$();\n// import {useEffect, useState} from \"react\";\n\n// import TableHead from \"./TableHead\";\n// import Skeleton from \"./Skeleton\";\n\n// function Table() {\n\n//   const [spatable, setSpatable] = useState();\n//   useEffect(() => {\n//     getSpatable();\n//   }, []);\n//   function getSpatable() {\n//     fetch('http://localhost:3002')\n//       .then(response => {\n//         return response.text();\n//       })\n//       .then(data => {\n//         setSpatable(data);\n\n//       });\n\n//   }\n//   console.log(typeof({spatable}));\n//  const data = Object.entries({spatable});\n// ключи объекта преобразуем в массив (ES6)\n// Object.keys({spatable});\n\n// значения объекта преобразуем в массив (ES8)\n// Object.values({spatable});\n// console.log(typeof{spatable});\n//  console.log(typeof(data));\n//  console.log(data);\n//     return (\n\n//               <div className=\"Table\">\n\n//   {spatable}\n// <table>\n//         <tr>\n//           <th>Date</th>\n//           <th>Name</th>\n//           <th>Quanity</th>\n//           <th>Distance</th>\n// </tr>\n/* {data.map((val, key) => {\r\n  return (\r\n    <tr key={key}>\r\n      <td>{val.date}</td>\r\n      <td>{val.name}</td>\r\n      <td>{val.quanity}</td>\r\n      <td>{val.distance}</td>\r\n    </tr>\r\n  )\r\n})} */\n/* </table>\r\n</div>\r\n);\r\n}\r\n export default Table; */\n\nimport React, { useState } from 'react';\nimport './App.css';\n\n//  let PageSize = 10;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Table() {\n  _s();\n  const [spatable, setSpatable] = useState();\n  const onSubmitForm = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch('http://localhost:3002');\n      const parseResponse = await response.json();\n      setSpatable(parseResponse);\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Table\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Quanity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Distance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }, this), spatable.map((val, key) => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: val.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: val.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: val.quanity\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: val.distance\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 21\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 19\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 21\n  }, this);\n}\n_s(Table, \"rcQuW5x5bgRlcjoQyuWi1gZx5lY=\");\n_c = Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Table","_s","spatable","setSpatable","onSubmitForm","e","preventDefault","response","fetch","parseResponse","json","err","console","error","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","val","key","date","name","quanity","distance","_c","$RefreshReg$"],"sources":["D:/работа/Projects/Spa_table1/react-postgres/src/components/Table.js"],"sourcesContent":["\r\n// import {useEffect, useState} from \"react\";\r\n\r\n// import TableHead from \"./TableHead\";\r\n// import Skeleton from \"./Skeleton\";\r\n\r\n\r\n \r\n// function Table() {\r\n  \r\n//   const [spatable, setSpatable] = useState();\r\n//   useEffect(() => {\r\n//     getSpatable();\r\n//   }, []);\r\n//   function getSpatable() {\r\n//     fetch('http://localhost:3002')\r\n//       .then(response => {\r\n//         return response.text();\r\n//       })\r\n//       .then(data => {\r\n//         setSpatable(data);\r\n        \r\n//       });\r\n     \r\n//   }\r\n//   console.log(typeof({spatable}));\r\n  //  const data = Object.entries({spatable});\r\n  // ключи объекта преобразуем в массив (ES6)\r\n// Object.keys({spatable});\r\n\r\n// значения объекта преобразуем в массив (ES8)\r\n// Object.values({spatable});\r\n// console.log(typeof{spatable});\r\n  //  console.log(typeof(data));\r\n  //  console.log(data);\r\n//     return (\r\n      \r\n//               <div className=\"Table\">\r\n                \r\n//   {spatable}\r\n// <table>\r\n//         <tr>\r\n//           <th>Date</th>\r\n//           <th>Name</th>\r\n//           <th>Quanity</th>\r\n//           <th>Distance</th>\r\n        // </tr>\r\n        /* {data.map((val, key) => {\r\n          return (\r\n            <tr key={key}>\r\n              <td>{val.date}</td>\r\n              <td>{val.name}</td>\r\n              <td>{val.quanity}</td>\r\n              <td>{val.distance}</td>\r\n            </tr>\r\n          )\r\n        })} */\r\n      /* </table>\r\n    </div>\r\n  );\r\n}\r\n  \r\n\r\n export default Table; */\r\n\r\n\r\n\r\n\r\n import React, { useState } from 'react';\r\n\r\n import './App.css';\r\n \r\n//  let PageSize = 10;\r\n \r\n export default function Table() {\r\n\r\n  const [spatable, setSpatable] = useState();\r\n \r\n   const onSubmitForm = async(e)=>{\r\n     e.preventDefault()\r\n     try{\r\n       const response = await fetch('http://localhost:3002');\r\n       const parseResponse = await response.json();\r\n       setSpatable(parseResponse);\r\n \r\n     }catch(err){\r\n       console.error(err.message);\r\n     }\r\n \r\n   }\r\n \r\n\r\n \r\n   return (\r\n\r\n                    <div className=\"Table\">\r\n                      \r\n  \r\n      <table>\r\n              <tr>\r\n                <th>Date</th>\r\n                <th>Name</th>\r\n                <th>Quanity</th>\r\n                <th>Distance</th>\r\n               </tr>\r\n              {spatable.map((val, key) => {\r\n                return (\r\n                  <tr key={key}>\r\n                    <td>{val.date}</td>\r\n                    <td>{val.name}</td>\r\n                    <td>{val.quanity}</td>\r\n                    <td>{val.distance}</td>\r\n                  </tr>\r\n                )\r\n              })}\r\n            </table>\r\n          </div>\r\n        );\r\n            }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}